pragma solidity ^0.4.21;
import "./CacaoLibrary.sol";
import "./SafeMath.sol";
import "./IVerifySignature.sol";

/// @title Abstract contract that controls the distribution of Cacaos
/// @author Guillermo Hernandez (0w3w)
/// @notice 3 distribution keys, the contract needs 2/3 votes in order to distribute the coin. (A multi signature process)
/// Only one process per address
contract CacaoDistribution is IVerifySignature {
    using CacaoLibrary for uint256;
    using SafeMath for uint256;

    // Total distribution
    uint256 public cacaosInCirculation = 0;

    function Distribute(
        address _to,
        uint256 _amount,
        bytes32 _nonce,
        address _address1,
        bytes _signature1,
        address _address2,
        bytes _signature2) external {
        _amount.requireValidAmount();
        // Verify Signatures
        require(canDistribute(_address1), "Not a distribution key.");
        require(canDistribute(_address2), "Not a distribution key.");
        require(_address1 != _address2, "Distribution addresses must be different");
        bytes32 txHash = hashDistributeData(_to, _amount, _nonce);
        verify(txHash, _signature1, _address1);
        verify(txHash, _signature2, _address2);
        // Distribute!
        onDistribute(_to, _amount);
        cacaosInCirculation = cacaosInCirculation.add(_amount);
        emit Distributed(_to, _amount);
    }

    /// @notice Creates a Hash of the coin creation data.
    /// @dev This is used to sign the data without needing a transaction, without any gas cost and without confirmation delay.
    /// @param _amount The amount of coins to issue
    /// @param _nonce Random nonce generated by client
    /// @return The hash of the transaction calculated using by `msg.sender`
    function hashDistributeData(address _to, uint256 _amount, bytes32 _nonce) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(_to, _amount, _nonce));
    }

    /// @notice Whether the _address can distribute cacaos or not
    /// @dev Abstract Method
    /// @param _address The address to verify
    /// @return True if it can
    function canDistribute(address _address) internal returns (bool _isValid);

    /// @notice Called when cacaos are being distributed for a given address
    /// @dev Abstract Method
    /// @param _to The address to send cacaos
    /// @param _amount The amount of cacaos to distribute
    function onDistribute(address _to, uint256 _amount) internal;

    /// @notice Triggers when cacaos are distributed
    /// @param _to The address of the recipient
    /// @param _amount The amount of cacaos
    event Distributed(address _to, uint256 _amount);
}